// Generated by Dagger (https://dagger.dev).
package com.rizz.mandiri.assignment.di;

import com.rizz.mandiri.assignment.features.movie.data.dataSource.remote.MovieApi;
import com.rizz.mandiri.assignment.features.movie.domain.repositories.MovieRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SingletonModule_ProvideMovieRepositoryFactory implements Factory<MovieRepository> {
  private final SingletonModule module;

  private final Provider<MovieApi> apiProvider;

  public SingletonModule_ProvideMovieRepositoryFactory(SingletonModule module,
      Provider<MovieApi> apiProvider) {
    this.module = module;
    this.apiProvider = apiProvider;
  }

  @Override
  public MovieRepository get() {
    return provideMovieRepository(module, apiProvider.get());
  }

  public static SingletonModule_ProvideMovieRepositoryFactory create(SingletonModule module,
      Provider<MovieApi> apiProvider) {
    return new SingletonModule_ProvideMovieRepositoryFactory(module, apiProvider);
  }

  public static MovieRepository provideMovieRepository(SingletonModule instance, MovieApi api) {
    return Preconditions.checkNotNullFromProvides(instance.provideMovieRepository(api));
  }
}
