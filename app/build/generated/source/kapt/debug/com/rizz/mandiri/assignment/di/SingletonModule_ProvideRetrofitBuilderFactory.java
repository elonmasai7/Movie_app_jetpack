// Generated by Dagger (https://dagger.dev).
package com.rizz.mandiri.assignment.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SingletonModule_ProvideRetrofitBuilderFactory implements Factory<Retrofit> {
  private final SingletonModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public SingletonModule_ProvideRetrofitBuilderFactory(SingletonModule module,
      Provider<OkHttpClient> okHttpClientProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofitBuilder(module, okHttpClientProvider.get());
  }

  public static SingletonModule_ProvideRetrofitBuilderFactory create(SingletonModule module,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new SingletonModule_ProvideRetrofitBuilderFactory(module, okHttpClientProvider);
  }

  public static Retrofit provideRetrofitBuilder(SingletonModule instance,
      OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofitBuilder(okHttpClient));
  }
}
