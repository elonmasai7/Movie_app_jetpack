// Generated by Dagger (https://dagger.dev).
package com.rizz.mandiri.assignment.features.movie.presentation.movieDetailScreen;

import com.rizz.mandiri.assignment.features.movie.domain.usecases.GetDetailMoviesByIdUseCase;
import com.rizz.mandiri.assignment.features.movie.domain.usecases.GetReviewByMovieIdUseCase;
import com.rizz.mandiri.assignment.features.movie.domain.usecases.GetVideoByMovieIdUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DetailMovieViewModel_Factory implements Factory<DetailMovieViewModel> {
  private final Provider<GetDetailMoviesByIdUseCase> getDetailMovieProvider;

  private final Provider<GetReviewByMovieIdUseCase> getReviewersProvider;

  private final Provider<GetVideoByMovieIdUseCase> getTrailersProvider;

  public DetailMovieViewModel_Factory(Provider<GetDetailMoviesByIdUseCase> getDetailMovieProvider,
      Provider<GetReviewByMovieIdUseCase> getReviewersProvider,
      Provider<GetVideoByMovieIdUseCase> getTrailersProvider) {
    this.getDetailMovieProvider = getDetailMovieProvider;
    this.getReviewersProvider = getReviewersProvider;
    this.getTrailersProvider = getTrailersProvider;
  }

  @Override
  public DetailMovieViewModel get() {
    return newInstance(getDetailMovieProvider.get(), getReviewersProvider.get(), getTrailersProvider.get());
  }

  public static DetailMovieViewModel_Factory create(
      Provider<GetDetailMoviesByIdUseCase> getDetailMovieProvider,
      Provider<GetReviewByMovieIdUseCase> getReviewersProvider,
      Provider<GetVideoByMovieIdUseCase> getTrailersProvider) {
    return new DetailMovieViewModel_Factory(getDetailMovieProvider, getReviewersProvider, getTrailersProvider);
  }

  public static DetailMovieViewModel newInstance(GetDetailMoviesByIdUseCase getDetailMovie,
      GetReviewByMovieIdUseCase getReviewers, GetVideoByMovieIdUseCase getTrailers) {
    return new DetailMovieViewModel(getDetailMovie, getReviewers, getTrailers);
  }
}
