// Generated by Dagger (https://dagger.dev).
package com.rizz.mandiri.assignment.di;

import com.rizz.mandiri.assignment.features.movie.domain.repositories.MovieRepository;
import com.rizz.mandiri.assignment.features.movie.domain.usecases.GetDetailMoviesByIdUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SingletonModule_ProvideGetDetailMovieUseCaseFactory implements Factory<GetDetailMoviesByIdUseCase> {
  private final SingletonModule module;

  private final Provider<MovieRepository> repositoryProvider;

  public SingletonModule_ProvideGetDetailMovieUseCaseFactory(SingletonModule module,
      Provider<MovieRepository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GetDetailMoviesByIdUseCase get() {
    return provideGetDetailMovieUseCase(module, repositoryProvider.get());
  }

  public static SingletonModule_ProvideGetDetailMovieUseCaseFactory create(SingletonModule module,
      Provider<MovieRepository> repositoryProvider) {
    return new SingletonModule_ProvideGetDetailMovieUseCaseFactory(module, repositoryProvider);
  }

  public static GetDetailMoviesByIdUseCase provideGetDetailMovieUseCase(SingletonModule instance,
      MovieRepository repository) {
    return Preconditions.checkNotNullFromProvides(instance.provideGetDetailMovieUseCase(repository));
  }
}
